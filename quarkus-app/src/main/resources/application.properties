quarkus.http.port=8701
%prod.quarkus.http.port=8080

# Use InMem H2 DB for dev and test profiles
%dev.quarkus.datasource.db-kind=h2
%dev.quarkus.datasource.jdbc.url=jdbc:h2:mem:test
%test.quarkus.datasource.db-kind=h2
# %test.quarkus.datasource.jdbc.url=jdbc:h2:mem:test
# quarkus.hibernate-orm.packages=org.acme.hibernate.orm.panache.entity,org.acme.hibernate.orm.panache.repository

# In prod we rely on Service Biding Operator (SBO) (chek if it is properly installed on your OCP Cluster)
quarkus.datasource.db-kind=postgresql
# %prod.quarkus.kubernetes-service-binding.services.my-db.api-version=postgres-operator.crunchydata.com/v1beta1
# %prod.quarkus.kubernetes-service-binding.services.my-db.kind=PostgresCluster
# %prod.quarkus.kubernetes-service-binding.services.my-db.name=postgres
# no need to enter these manually anymore, SBO will take care magically
%prod.quarkus.datasource.username=postgres
%prod.quarkus.datasource.password=password
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://postgres-ha/postgres
# %prod.quarkus.datasource.jdbc.max-size=8
# %prod.quarkus.datasource.jdbc.min-size=3

# %prod.quarkus.hibernate-orm.datasource=postgresqldb
%dev.quarkus.hibernate-orm.database.generation=drop-and-create
%prod.quarkus.hibernate-orm.database.generation=none
quarkus.hibernate-orm.log.sql=true
%prod.quarkus.hibernate-orm.log.sql=false
# quarkus.hibernate-orm.sql-load-script=import.sql

# quarkus.log.category."org.hibernate".level=DEBUG
quarkus.kubernetes-client.trust-certs = true
openshift.route.expose = true

quarkus.log.level=INFO
quarkus.log.console.color = false
quarkus.banner.enabled = true
#Json logging
quarkus.log.console.json.pretty-print=false
quarkus.log.console.json=false
#to disable in PROD just use this env var QUARKUS_LOG_CONSOLE_JSON=false